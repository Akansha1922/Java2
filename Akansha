import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

public class WeatherApp {
    private static final String API_BASE_URL = "https://samples.openweathermap.org/data/2.5/forecast/hourly?q=London,us&appid=b6907d289e10d714a6e88b30761fae22";

    public static void main(String args[]) {
        WeatherApp app = new WeatherApp();
        app.run();
    }
    private void run() {
        int ch;
        do {
            printMenu();
            ch = getUserOption();
            switch (ch) {
                case 1:
                    getWeatherForDate();
                    break;
                case 2:
                    getWindSpeedForDate();
                    break;
                case 3:
                    getPressureForDate();
                    break;
                case 0:
                    System.out.println("Program Exit");
                    break;
                default:
                    System.out.println("Invalid option");
            }
        } while (ch != 0);
    }

    private void printMenu() {
        System.out.println("1. Get Weather");
        System.out.println("2. Get Wind Speed");
        System.out.println("3. Get Pressure");
        System.out.println("0. Exit");
    }

    private int getUserOption() {
        int ch = -1;
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            System.out.print("Enter the choice: ");
            ch = Integer.parseInt(reader.readLine());
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
        return ch;
    }

    private void getWeatherForDate() {
        try {
            String date = getDateFromUser("Enter the date (YYYY/MM/DD HH:mm:ss): ");
            JSONObject response = makeAPIRequest();
            JSONArray forecasts = response.getJSONArray("list");
            for (int i = 0; i < forecasts.length(); i++) {
                JSONObject forecast = forecasts.getJSONObject(i);
                if (forecast.getString("dt_txt").equals(date)) {
                    JSONObject main = forecast.getJSONObject("main");
                    double temp = main.getDouble("temp");
                    System.out.println("Temperature at " + date + " is " + temp + "Â°C");
                    return;
                }
            }
            System.out.println("Data is not available for given date.");
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void getWindSpeedForDate() {
        try {
            String date = getDateFromUser("Enter the date (YYYY/MM/DD HH:mm:ss): ");
            JSONObject response = makeAPIRequest();
            JSONArray forecasts = response.getJSONArray("list");
            for (int i = 0; i < forecasts.length(); i++) {
                JSONObject forecast = forecasts.getJSONObject(i);
                if (forecast.getString("dt_txt").equals(date)) {
                    JSONObject wind = forecast.getJSONObject("wind");
                    double windSpeed = wind.getDouble("speed");
                    System.out.println("Wind speed at " + date + " is " + windSpeed + " m/s");
                    return;
                }
            }
            System.out.println("Data is not available for given date.");
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private void getPressureForDate() {
        try {
            String date = getDateFromUser("Enter the date (YYYY/MM/DD HH:mm:ss): ");
            JSONObject response = makeAPIRequest();
            JSONArray forecasts = response.getJSONArray("list");
            for (int i = 0; i < forecasts.length(); i++) {
                JSONObject forecast = forecasts.getJSONObject(i);
                if (forecast.getString("dt_txt").equals(date)) {
                    JSONObject main = forecast.getJSONObject("main");
                    double pressure = main.getDouble("pressure");
                    System.out.println("Pressure at " + date + " is " + pressure + " hPa");
                    return;
                }
            }
            System.out.println("Data is not available for given date");
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }

    private String getDateFromUser(String prompt) {
        String date = null;
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            System.out.print(prompt);
            date = reader.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return date;
    }

    private JSONObject makeAPIRequest() throws JSONException {
        try {
            URL url = new URL(API_BASE_URL);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            int responseCode = connection.getResponseCode();

            if (responseCode == HttpURLConnection.HTTP_OK) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String line;
                StringBuilder response = new StringBuilder();
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();
                return new JSONObject(response.toString());
            } else {
                System.out.println("Failed to fetch data from the API. Response code: " + responseCode);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }
}

